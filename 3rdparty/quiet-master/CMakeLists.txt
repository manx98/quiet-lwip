cmake_minimum_required (VERSION 2.6)
project (Quiet)
include(CheckLibraryExists)
include(CheckIncludeFiles)
include(CheckCCompilerFlag)

set(QUIET_PROFILES_LOCATION "${CMAKE_BINARY_DIR}/share/quiet/")
add_definitions(-DQUIET_PROFILES_LOCATION="${QUIET_PROFILES_LOCATION}quiet-profiles.json")

if (CMAKE_C_COMPILER_ID MATCHES "GNU" OR CMAKE_C_COMPILER_ID MATCHES "Clang")
  if(CMAKE_BUILD_TYPE STREQUAL "Debug")
      add_definitions(-DQUIET_DEBUG)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g -O0")
  else()
      if(EMSCRIPTEN)
      elseif(CMAKE_C_COMPILER_ID MATCHES "Clang")
        check_c_compiler_flag("-Ofast" HAVE_O_FAST)
        if(HAVE_O_FAST)
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Ofast -g3")
          set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Ofast -flto")
        else()
          set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -g")
        endif()
      elseif(CMAKE_C_COMPILER_ID MATCHES "GNU")
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -g")
      endif()
  endif()
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wpedantic -Wall -D_XOPEN_SOURCE=700 -std=c99")
endif()

set(CMAKE_MACOSX_RPATH 1)

include_directories(${CMAKE_SOURCE_DIR}/include)

set(SRCFILES src/demodulator.c src/modulator.c src/utility.c src/decoder.c src/encoder.c src/profile.c src/error.c)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

if(WIN32)
    set(CORE_DEPENDENCIES liquid-static jansson)
else ()
    set(CORE_DEPENDENCIES liquid-static jansson m)
endif ()

set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads)
if (CMAKE_USE_PTHREADS_INIT)
  add_definitions(-DRING_BLOCKING=1)
  add_definitions(-DQUIET_PTHREAD_ERROR=1)
  set(SRCFILES ${SRCFILES} src/ring_blocking.c)
  set(CORE_DEPENDENCIES ${CORE_DEPENDENCIES} ${CMAKE_THREAD_LIBS_INIT})
else()
  add_definitions(-DRING_BLOCKING=0)
  add_definitions(-DQUIET_PTHREAD_ERROR=0)
  set(SRCFILES ${SRCFILES} src/ring.c)
endif()

set(SRCFILES ${SRCFILES} src/portaudio_encoder.c src/portaudio_decoder.c)
add_definitions(-DQUIET_PORTAUDIO=1)
set(CORE_DEPENDENCIES ${CORE_DEPENDENCIES} portaudio_static)

add_library(quiet_static ${SRCFILES})
target_link_libraries(quiet_static ${CORE_DEPENDENCIES})
set_target_properties(quiet_static PROPERTIES OUTPUT_NAME "quiet")
add_library(quiet SHARED ${SRCFILES})
target_link_libraries(quiet ${CORE_DEPENDENCIES})
set_target_properties(quiet PROPERTIES INSTALL_RPATH "@rpath/libquiet.dylib")

add_custom_target(lib DEPENDS quiet quiet_static)

file(COPY include/quiet-portaudio.h include/quiet.h DESTINATION ${CMAKE_BINARY_DIR}/include)
file(COPY quiet-profiles.json DESTINATION ${CMAKE_BINARY_DIR}/share)

set(buildable_programs "")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
add_executable(quiet_encode_file programs/encode_file.c)
target_link_libraries(quiet_encode_file quiet_static sndfile ${CMAKE_THREAD_LIBS_INIT})
set(buildable_programs ${buildable_programs} quiet_encode_file)

add_executable(quiet_decode_file programs/decode_file.c)
target_link_libraries(quiet_decode_file quiet_static sndfile ${CMAKE_THREAD_LIBS_INIT})
set(buildable_programs ${buildable_programs} quiet_decode_file)

add_executable(quiet_encode_soundcard programs/encode_soundcard.c)
target_link_libraries(quiet_encode_soundcard quiet_static ${CMAKE_THREAD_LIBS_INIT})
set(buildable_programs ${buildable_programs} quiet_encode_soundcard)

add_executable(quiet_decode_soundcard programs/decode_soundcard.c)
target_link_libraries(quiet_decode_soundcard quiet_static ${CMAKE_THREAD_LIBS_INIT})
set(buildable_programs ${buildable_programs} quiet_decode_soundcard)

add_custom_target(quite-programs DEPENDS ${buildable_programs})
file(COPY include/quiet DESTINATION ${CMAKE_BINARY_DIR}/include)